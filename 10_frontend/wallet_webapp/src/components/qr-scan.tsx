/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/jSixNdA7LFX
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
"use client"
import {useState, useEffect, useRef} from 'react';
import jsQR from 'jsqr';
import { Button } from "@/components/ui/button";
import axios from 'axios';
import { CredentialOfferClient, MetadataClient,} from '@sphereon/oid4vci-client';

const getAccessToken = async(initiationURI_: string) => {
  const _initiationRequestWithUrl = await CredentialOfferClient.fromURI(initiationURI_);
  const _metadata = await MetadataClient.retrieveAllMetadataFromCredentialOffer(_initiationRequestWithUrl);

  console.log(_initiationRequestWithUrl.preAuthorizedCode);
  console.log(_metadata.token_endpoint);
  console.log(_metadata.issuer);
  
  const clientId = '218232426';
  
  const tokenReq = new URLSearchParams();
  tokenReq.append('client_id', clientId);
  tokenReq.append('grant_type', 'urn:ietf:params:oauth:grant-type:pre-authorized_code');
  tokenReq.append('pre-authorized_code', 'aFYv7nBLVxB8n6rjNOGs3MSsAcpQVEWT9JVn886S2M0');

  await axios.post(_metadata.token_endpoint, tokenReq, {
      headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Access-Control-Allow-Origin': '*'
      },
  }).then(res => {
      console.log(res.data)
  }).catch(e=> {
      console.log(e.response.data);
  });
}

export function QrScan() {
  const videoRef = useRef<HTMLVideoElement>(null)
    const canvasRef = useRef<HTMLCanvasElement>(null)

    const [contentWidth, setContentWidth] = useState<number>(100)
    const [contentHeight, setContentHeight] = useState<number>(100)
    useEffect(() => {
        const config = { audio:false, video: { facingMode: "environment" }}
        const ctx = canvasRef.current?.getContext('2d')
        const canvasUpdate = () => {
            if (ctx && videoRef.current && canvasRef.current) {
                canvasRef.current.width = contentWidth
                canvasRef.current.height = contentHeight
                ctx.drawImage(videoRef.current, 0, 0, contentWidth, contentHeight)
                requestAnimationFrame(canvasUpdate)
            }
        }
        const checkImage = async() => {
            if(ctx && videoRef.current){
                ctx?.drawImage(videoRef.current, 0, 0, contentWidth, contentHeight)
                const imageData = ctx.getImageData(0, 0, contentWidth, contentHeight)
                if (imageData) {
                    const code = jsQR(imageData.data, contentWidth, contentHeight)
                    if (code) {
                      console.log(code.data);
                      getAccessToken(code.data);
                    }
                }
                setTimeout(()=>{ checkImage() }, 200);
            }
        }
    
        navigator.mediaDevices.getUserMedia(config)
        .then(stream => {
            if (videoRef.current) {
                videoRef.current.srcObject = stream
                videoRef.current.onloadedmetadata = () => {
                    if (videoRef.current){
                        videoRef.current.play()
                        setContentWidth(videoRef.current.clientWidth)
                        setContentHeight(videoRef.current.clientHeight)
                        canvasUpdate()
                        checkImage()
                    }
                }
            }
        })
        .catch(err => {
            console.log(err)
        })
    },[contentWidth, contentHeight])

  return (
    <div className="flex flex-col items-center h-screen bg-gray-100 dark:bg-gray-900">
      <div className="relative w-full max-w-md bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
        <div className="aspect-square relative overflow-hidden rounded-lg">
          <span className="w-full h-full object-cover rounded-md bg-gray-100 dark:bg-gray-800" />
          <div className="absolute inset-0 flex items-center justify-center">
            <video 
              className="w-64 h-64 border-4 border-gray-900 rounded-lg dark:border-gray-50"
              ref={videoRef} 
              autoPlay playsInline 
              width={contentWidth} 
              height={contentHeight}>
            </video>
            <canvas ref={canvasRef} className='hidden'></canvas>
          </div>
        </div>
        <div className="mt-6 flex justify-center">
          <Button>Scan QR Code</Button>
        </div>
        <div className="mt-6 text-center text-gray-500 dark:text-gray-400 font-medium" id="qr-result" />
      </div>
    </div>
  )

}
